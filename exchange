    class DiscoveryFeignClient(
        private val delegate: Client,
        private val loadBalancer: LoadBalancerClient,
        private val env: Environment,
    ) : Client {
        @Suppress("TooGenericExceptionCaught")
        override fun execute(request: Request, options: Request.Options): Response {
            try {
                val original = URI.create(request.url())

                val targetServiceDomainName = original.host
                val targetServiceName = CustomConsulRegistrationCustomizer.extractServiceName(env, targetServiceDomainName)
                val targetServiceDiscoveryName = CustomConsulRegistrationCustomizer.composeServiceDiscoveryName(targetServiceName, env)

                val chosenInstance = loadBalancer.choose(targetServiceDiscoveryName)
                    ?: throw IllegalStateException("No instances available for serviceId='$targetServiceDiscoveryName'")

                val newUrl: String = request.url().replace(original.host, chosenInstance.host)

                val requestViaDiscovery = Request.create(
                    request.httpMethod(),
                    newUrl,
                    request.headers(),
                    request.body(),
                    request.charset(),
                    request.requestTemplate()
                )

                log.warn("Executing LB request $requestViaDiscovery, oldRequest: $request")

                return delegate.execute(requestViaDiscovery, options)
            } catch (e: Exception) {
                log.warn("Exception occurred while using client consul discovery process. Request: $request", e)
                return delegate.execute(request, options)
            }
        }